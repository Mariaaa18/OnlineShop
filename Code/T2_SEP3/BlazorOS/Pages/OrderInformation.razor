@page "/OrderInformation/{id:int}"
@using global::Shared.Models
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces

@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@inject NavigationManager navMgr
@inherits LayoutComponentBase
@inject IShoppingCartService shoppingCartService
@inject ISockCardService socksCardService
@inject ICardItemService cardItemService
@inject IOrderService orderService
@inject IUserService userService
@inject ISockInventoryService sockInventoryService


<div class="container" style="display:@showModalInfo"> 
    <div class="card">
    <p>Please introduce contact and shipping information for your order</p>
        <div class="form-group-field">
            <label>Email: </label>
            <input class="long-input" type="text" @bind="email" @bind:event ="oninput"/>
        </div>
    
        <div class="form-group-field">
            <label>Name:</label>
            <input class="long-input" type="text" @bind="name" @bind:event ="oninput"/>
        </div>
    
        <div class="small-form-field" >
            <label>Phone:</label>
            <input type="text" @bind="phone" @bind:event ="oninput"/>
        </div>  
    </div>
    <div class="card">
        <h5>Shipping infomation</h5>
        <div>
            <div class="small-form-field" >
                <label>Country:</label>
                <input type="text"   @bind="country" @bind:event ="oninput"/>
            </div>
    
            <div class="form-group-field">
                <label>City:</label>
                <input class="long-input" type="text" @bind="city" @bind:event ="oninput"/>
            </div>
        </div>
    
        <div class="small-form-field">
            <label>Street:</label>
            <input type="text"  @bind="street" @bind:event ="oninput"/>
        </div>
    
        <div>
            <div class="small-form-field">
                <label>Number:</label>
                <input type="text" @bind="number" @bind:event ="oninput"/>
            </div>
            <div class="small-form-field">
                <label>Postcode:</label>
                <input type="text" @bind="postCode" @bind:event ="oninput"/>
            </div>
    
        </div>
        
        <div class="small-form-field">
            <label>Option:</label>
            <input type="text" class="small-input" @bind="option" @bind:event ="oninput"/>
        </div>
    </div>
    
    <div class="button-message">
        <div @onclick="() => ConfirmInformation()" class="myButton">Confirm</div>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <br/> <label style="color:red">@resultMsg</label>
        }
    </div>

    </div>



<div class="table-div" style="display: @showModalSum">
    <table class="table">
        <thead>
        <th></th>
        <th>Item</th>
        <th>Quantity</th>
        </thead>
        <tbody>
 
     
        @foreach (var p in productList)
        {
            ProductCard? productCard = cards.FirstOrDefault(productCard => productCard.Id == p.ProductCardId);
            CartItem? cardItem = items.FirstOrDefault(item => item.ProductId == p.Id);

            <tr> <td ><img src="@productCard.Image" style="width: 100px"/></td>
                <td >
                    <p>@productCard.Title</p>
                    <p>@p.Size.ToUpper()</p>
                    <p style="color: @p.Color">@p.Color</p>
                </td>
                <td>
                    <p>@cardItem.Quantity</p>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <div @onclick="PlaceOrder" class="myButton" id="checkout-btn" style="display: @placeOrderBtn">Place Order</div>
    <div @onclick="FinishOrder" class="myButton" id="checkout-btn" style="display: @okBtn">OK</div>
    <div @onclick="GoToPayment" class="myButton" id="checkout-btn" style="display: @goToPaymentBtn">Go To Payment</div>
    <div @onclick="CancelOrder" class="myButton" id="checkout-btn" style="display: @cancelBtn">Cancel Order</div>
   
    <p style="margin-top: 10px">@resultMsg</p>
</div>

    <div class="order-summary-div" style="display: @showModalSum">
        <b>Order Summary</b>
        <p>Subtotal: <label bind="@subtotal">@subtotal</label></p>
        <br/>
        <div>
            <p>@OrderDto.CustomerName</p>
            <p> @OrderDto.CustomerEmail</p>
            <p> @OrderDto.CustomerPhoneNumber</p>
            <br/>
            <p>Shipping address: </p>
            <p>@OrderDto.Shipping.City, @OrderDto.Shipping.Country</p>
            <p>@OrderDto.Shipping.Street, @OrderDto.Shipping.Number</p>
            <p>@OrderDto.Shipping.ExtraInfo</p>
            <p>@OrderDto.Shipping.PostCode</p>
        </div></div>
       
    


<div class="payment-info" style="display: @paymentInfo; z-index: 5">
    
    <label>Payment not required</label>
    <p> Don't worry!!</p>

    <p>  You will pay with card or cash when you receive your product at the address you provided before</p>

    <p>   This is really important, confirm that you have understood!</p>
    <div class="myButton" @onclick="ClosePaymentMsg">Ok</div>
    
</div>




   

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

   [Parameter]
   public int Id { get; set; }
    private User user = null;
    private bool isLoggedIn=false;
    private string? email="";
    private string? name="";
    private string? phone="";
    private string? country = "";
    private string? city = "";
    private string? street = "";
    private string? number = "";
    private string? postCode = "";
    private string option = "";
    private int numberOfProducts = 0;
    
    private double subtotal = 0;
    private List<Product> productList = new List<Product>();
    private List<ProductCard?> cards = new List<ProductCard?>();
    private List<CartItem?> items = new List<CartItem?>();
    private global::Shared.Models.ShoppingCart shoppingCart = null;

    
    private CreateOrderDto OrderDto = new CreateOrderDto(2,"ggg","hhh","jjj","jjjj",null,new Address(1,1,"hhh","jjj",888,"fff",5,"hhhh"));
    

    private string resultMsg = "";
    private string color = "";
    private string showModalInfo = "initial";
    private string showModalSum = "none";
    private string placeOrderBtn = "none";
    private string goToPaymentBtn = "initial";
    private string okBtn = "none";
    private string cancelBtn = "initial";
    private string paymentInfo = "none";


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal userClaims = authState.User;
        isLoggedIn = userClaims.Identity != null;
        if (!isLoggedIn) return;
        string? userEmail = userClaims.FindFirst("Email").Value;
        user = await userService.GetByEmail(userEmail);

        if (user!=null)
        {
            email = user.Email;
            name = user.Name;
            phone = user.PhoneNumber;

            if (user.Address!=null)
            {
                country = user.Address.Country;
                city = user.Address.City;
                street = user.Address.Street;
                postCode = user.Address.PostCode.ToString();
                number = user.Address.Number.ToString();
                option = user.Address.ExtraInfo;
            }   
        }
        
    }

    private async Task ConfirmInformation()
    {
        try
        {
            global::Shared.Models.ShoppingCart cart = await shoppingCartService.getByIdAsync(Id);
            if (user!=null)
            {
                OrderDto = new CreateOrderDto( numberOfProducts,"Processing order", name, email, phone, cart, new Address(1, user.Id, country, city, Convert.ToInt32(postCode), street, Convert.ToInt32(number), option));
            }
            OrderDto = new CreateOrderDto( numberOfProducts,"Processing order", name, email, phone, cart, new Address(1,-1 , country, city, Convert.ToInt32(postCode), street, Convert.ToInt32(number), option));
         
            LoadOrderSummary();
            
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }

    }
    protected async Task LoadOrderSummary()
    {
        try
        {
            productList = (List<Product>)OrderDto.ShoppingCart.Products;
            foreach (Product p in productList)
            {
                SocksCard card = await socksCardService.GetById(p.ProductCardId);
                cards.Add(card);
              
                CartItem item = await cardItemService.GetByIdsAsync(p.Id, OrderDto.ShoppingCart.Id);
                
                items.Add(item);
                int itemsCount = item.Quantity;
                numberOfProducts += itemsCount;
                double totalPrice = card.Price * item.Quantity;
                subtotal += totalPrice;

            }

            OrderDto.TotalPrice = subtotal;
            Console.WriteLine(subtotal+"/"+numberOfProducts);
            OrderDto.NumberOfProducts = numberOfProducts;
            showModalInfo = "none";
            showModalSum = "initial";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

    
    protected async Task PlaceOrder()
    {
        try
        {
            shoppingCart = await shoppingCartService.getByIdAsync(Id);
            foreach (var p in shoppingCart.Products)
            {
                CartItem cartItem = await cardItemService.GetByIdsAsync(p.ProductCardId,Id);

                Inventory inventory = await sockInventoryService.GetByParameters(p.ProductCardId, p.Color, p.Size);
                long newQuantity = inventory.Quantity - cartItem.Quantity;
                if (newQuantity < 0)
                {

                    resultMsg = "NO Stock!";
                    throw new Exception("NO Stock");
                }
                Inventory newInventory = new Inventory( p.ProductCardId, p.Color, p.Size,newQuantity);
                newInventory.Id = inventory.Id;
                await sockInventoryService.updateAsync(newInventory);
            }

            await orderService.CreateAsync(OrderDto);
            
            foreach (var p in shoppingCart.Products)
            {
                await shoppingCartService.RemoveProduct(p, shoppingCart.Id);
            }

            resultMsg = "Thanks for your purchase!! Do you want to keep shopping?";

            okBtn = "initial";
            cancelBtn = "none";
            placeOrderBtn = "none";
            goToPaymentBtn = "none";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }

    }
    
    protected async Task CancelOrder()
    {
        navMgr.NavigateTo($"/ShoppingCart/{OrderDto.ShoppingCart.Id}");
    }
    
    protected async Task GoToPayment()
    {
        paymentInfo = "initial";
    }
    
    protected async Task ClosePaymentMsg()
    {
        paymentInfo = "none";
        placeOrderBtn = "initial";
        goToPaymentBtn = "none";
    }

    protected async Task FinishOrder()
    {
        navMgr.NavigateTo("/");
    }

    




}