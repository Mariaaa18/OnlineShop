@page "/ShoppingCart/{id:int}"
@using HttpClients.ClientInterfaces
@using global::Shared.Models
@inject IShoppingCartService shoppingCartService
@inject ISockCardService socksCardService
@inject ISocksService socksService
@inject ISockInventoryService sockInventoryService
@inject NavigationManager navMgr

<h3>Item summary (@productList.Count)</h3>
<div class="table-div">
    <table class="table">
        <thread>
            <th></th>
            <th>Item</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
        </thread>
        <tbody>
        @foreach (var p in productList)
        {
            ProductCard? card = cards.FirstOrDefault(productCard => productCard.Id == p.ProductCardId);
            <tr> <td class="product-image"><img src="@card.Image"/></td>
                <td>
                    <p>@card.Title</p>
                    <p>@p.Size.ToUpper()</p>
                    <p>@p.Color</p>
                </td>
                <td>@card.Price</td>
                <td><input type="number" placeholder="1"/></td>
                <td>@card.Price (*quantity to be implemented)</td>
            </tr>
        }
        </tbody>
    </table>
    </div>

<div class="order-summary-div">
    Order Summary
    <p>Sutotal: @subtotal</p>
    <button>Checkout</button>
    Apply a coupon code or points on the next step
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private global::Shared.Models.ShoppingCart shoppingCart;
    private List<Product> productList=new List<Product>();
    private double subtotal=0;
    private string msg = "";
    private List<ProductCard?> cards = new List<ProductCard?>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            shoppingCart= await shoppingCartService.getByIdAsync(Id);
            productList = (List<Product>)await shoppingCartService.GetProducts(Id);
            foreach (Product p in productList)
            {
                SocksCard card = await socksCardService.GetById(p.ProductCardId);
                cards.Add(card);
                subtotal += card.Price;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

   
}