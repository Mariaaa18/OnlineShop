@page "/ShoppingCart/{id:int}"
@using HttpClients.ClientInterfaces
@using global::Shared.Models
@using Smart.Blazor
@inject IShoppingCartService shoppingCartService
@inject ISockCardService socksCardService
@inject ISocksService socksService
@inject ISockInventoryService sockInventoryService
@inject ICardItemService cardItemService
@inject NavigationManager navMgr

<h3>Item summary (@productList.Count)</h3>
<div class="table-div">
    <table class="table">
        <thead>
            <th></th>
            <th>Item</th>
            <th>Price</th>
            <th>Quantity</th>
        <th>Total</th>
        <th></th>
        </thead>
        <tbody>
        @foreach (var p in productList)
               {
                   ProductCard? card = cards.FirstOrDefault(productCard => productCard.Id == p.ProductCardId);
                   CardItem? cardItem = items.FirstOrDefault(item => item.ProductId == p.Id);
            <tr> <td ><img src="@card.Image" style="width: 100px"/></td>
                <td >
                    <p>@card.Title</p>
                    <p>@p.Size.ToUpper()</p>
                    <p style="color: @p.Color">@p.Color</p>
                </td>
                <td class="price-td">@card.Price</td>
                <td>
                    <label>@cardItem.Quantity</label>
                    <div onclick="() => @IncreaseQuantity(p.Id,@cardItem.Quantity)" class="myButton">+</div>
                    <div onclick="(() => @DecreaseQuantity(p.Id,@cardItem.Quantity))" class="myButton">-</div>
                </td>
                <td >@card.Price</td>
                <td><button @onclick="(() => { Remove(p.Id); })" class="myButton">Remove</button></td>
            </tr>
}
            </tbody>
    </table>
    </div>

<div class="order-summary-div">
    <b>Order Summary</b>
    <p>Subtotal: @subtotal</p>
    <button class="myButton" id="checkout-btn">Checkout</button>
   <p>Apply a coupon code or points on the next step</p>
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    
    private global::Shared.Models.ShoppingCart shoppingCart= null;
    private List<Product> productList=new List<Product>();
    private double subtotal=0;
    private string msg = "";
    private List<ProductCard?> cards = new List<ProductCard?>();
    private List<CardItem?> items= new List<CardItem?>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            shoppingCart= await shoppingCartService.getByIdAsync(Id);
            productList = (List<Product>)await shoppingCartService.GetProducts(Id);
            foreach (Product p in productList)
            {
                SocksCard card = await socksCardService.GetById(p.ProductCardId);
                cards.Add(card);
                CardItem item=await cardItemService.GetByIdsAsync(p.Id,Id);
                items.Add(item);
                subtotal += card.Price;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    protected async Task Remove(int productId)
    {
        Product product = await socksService.getByIdAsync(productId);
        shoppingCartService.RemoveProduct(product, Id);
    }

    protected async Task IncreaseQuantity(int id, int quantity)
    {
        quantity++;
        cardItemService.UpdateQuantityAsync(id, quantity);
    }
    protected async Task DecreaseQuantity(int id, int quantity)
    {
        quantity--;
        cardItemService.UpdateQuantityAsync(id, quantity);
    }
   
}