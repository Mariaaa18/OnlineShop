@page "/CreateSocks"
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using global::Shared.DTOs
@using global::Shared.Models
@using Smart.Blazor

@inject ISockCardService sockService
@inject NavigationManager NavManager

<h3>Create Sock</h3>
<div class="container"> 
<div class="card">
    
    <div class="form-group-field">
        <label>Title:</label>
        <input class="long-input" type="text" @bind="title" @bind:event ="oninput"/>
        </div>
    
    <div class="form-group-field">
        <label>Description:</label>
        <input class="long-input" type="text" @bind="description" @bind:event ="oninput"/>
        
    </div>
    <div>
    <div class="small-form-field" >
        <label>Price (â‚¬):</label>
        <input type="text" class="small-input" @bind="price" @bind:event ="oninput"/>
    </div>  
    
    <div class="small-form-field" >
        <label>Material:</label>
        <input type="text" class="small-input"  @bind="material" @bind:event ="oninput"/>
        
    </div>
    </div>
    <div class="form-group-field">
        <label>Image:</label>
        <input class="long-input" type="text" @bind="image" @bind:event ="oninput"/>
    </div>
    <div>
    <div class="small-form-field">
            <label>Brand:</label>
            <input type="text" class="small-input" @bind="brand" @bind:event ="oninput"/>
    </div>
    
    <div  class="small-form-field">
        <label>Type:</label>
        <div id="dropdown-list">
            <DropDownList Id="dropdown-input" Placeholder="Select the type"  OnItemClick="TypeSelection">
            <ListItem Value="Invisible">Invisible</ListItem>
            <ListItem Value="Extra low cut">Extra low cut</ListItem>
            <ListItem Value="Low cut">Low cut</ListItem>
            <ListItem Value="Anklets">Anklets</ListItem>
            <ListItem Value="Mid calf">Mid calf</ListItem>
            <ListItem Value="Executive">Executive</ListItem>
            <ListItem Value="Knee high">Knee high</ListItem>
        </DropDownList></div>
    </div>   </div></div>
    <div class="button-message">
        <button @onclick="CreateSocksCard" class="acceptbtn">Confirm</button>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <br/> <label style="color:red">@resultMsg</label>
        }
    </div>
</div>

@code {
    
    private string title = "";
    private string description = "";
    private string material = "";
    private string price = "";
    private string brand = "";
    private string image = "";
    private string type = "";
    
    private string resultMsg = "";
    private string color = "";

    private bool blackColor = false;
    private long blackStockXXS = 0;

    private void TypeSelection(Event ev)
    {
        DropDownListItemClickEventDetail detail = ev["Detail"];
        
        type = detail.Label;
    }
    
    private async Task CreateSocksCard()
    {
        resultMsg = "";
        try
        {
            SocksCard card= await sockService.Create(new CreateSockCardDto( title, description,  Convert.ToDouble(price), material, brand, image, type));


            
            title = "";
            material = "";
            description = "";
            price = "";
            brand = "";
            image = "";
            type = "Select the type";
            
            NavManager.NavigateTo($"/CreateSockInventory/{card.Id}");

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
}