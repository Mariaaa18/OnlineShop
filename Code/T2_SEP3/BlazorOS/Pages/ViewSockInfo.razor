@page "/ViewSockInfo/{id:int}"
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@using global::Shared.DTOs
@inject ISockCardService cardService
@inject ISockInventoryService inventoryService 
@inject ISocksService socksService
@inject IShoppingCartService shoppingCartService
@inject ICardItemService cardItemService
@inject NavigationManager navMgr


<div style="display: inline">
    <img class="sockImg" src=@card.Image/>

    <div class="sockInfo">
        <h4>@card.Title</h4>
        <b><label id="price-label">@card.Price â‚¬</label></b>
        <p>@card.Description</p>
        <p>Material: @card.Material</p>
        <p>Brand: @card.Brand</p>
        <p>Type: @card.Type</p>
        <p>Color: @selectedColor</p>
        <div class="color-container">
            @foreach (string color in colors)
            {
                <div class="colorBtn" style="background-color: @color; width: 25px" @onclick="() => { selectedColor=color; LoadSizes();}"></div>
            }
        </div><br/><br/>
        <p>Size: @selectedSizes</p>
        <div class="size-container">
            @foreach (string s in sizes)
            {
                <div class="sizeBtn" @onclick="() => { selectedSizes = s; }" >@s</div>

            }
        </div>
        
        <br/><br/>
        
        <button @onclick="AddToCart" class="myButton">Add to the cart</button>
        @errorMsg
        <input type="text" @bind="cartId" @bind:event ="oninput"/>
        shopping cart id (to be deleted when login is implemented)
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    
    private string errorMsg{ get; set; } = "";
    private SocksCard card{ get; set; }=null!;
    private ICollection<String> colors { get; set; }=new List<string>();
    private String selectedColor{ get; set; }="" ;
    private ICollection<String> sizes{ get; set; }=new List<string>();
    private String selectedSizes{ get; set; }="";
    private ICollection<Inventory> inventories { get; set; }=new List<Inventory>();
    private String cartId{ get; set; }="";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            card = await cardService.GetById(Id);
            inventories = await inventoryService.GetByCardIdAsync(card.Id);
            LoadColors();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMsg = e.Message;
        }
    }

    private void LoadColors()
    {
        foreach (Inventory i in inventories)
        {
            if (!colors.Contains(i.Color))
            {
                colors.Add(i.Color);
            }
        }
        
    }
    
    
    private void LoadSizes()
    {
        sizes.Clear();
        foreach (var i in inventories)
        {
            if (selectedColor.Equals(i.Color))
            {
                if (!sizes.Contains(i.Size))
                {
                    sizes.Add(i.Size);
                }
            }
        }
    }

    private async void AddToCart()
    {
        CreateSocksDto socksDto = new CreateSocksDto(card.Id, selectedSizes, selectedColor);
        Socks socks = await socksService.CreateAsync(socksDto);
        CreateCardItemDto dto = new CreateCardItemDto(Convert.ToInt32(cartId), socks.Id);
        await cardItemService.CreateAsync(dto);
        await shoppingCartService.AddProductAsync(socks, Convert.ToInt32(cartId));
        navMgr.NavigateTo($"/shoppingCart/{cartId}");
    }
}