@page "/OrderInformation/{id:int}"
@using global::Shared.Models
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@using System.Text.Json.Serialization
@inject NavigationManager navMgr
@inherits LayoutComponentBase
@inject IShoppingCartService shoppingCartService
@inject ISockCardService socksCardService
@inject ICardItemService cardItemService
@inject IOrderService orderService

<h3>OrderInformation</h3>

<div class="container" style="display:@showModalInfo"> 
    <div class="card">
    
        <div class="form-group-field">
            <label>Email: </label>
            <input class="long-input" type="text" @bind="email" @bind:event ="oninput"/>
        </div>
    
        <div class="form-group-field">
            <label>Name:</label>
            <input class="long-input" type="text" @bind="name" @bind:event ="oninput"/>
        </div>
    
        <div class="small-form-field" >
            <label>Phone:</label>
            <input type="text" class="small-input" @bind="phone" @bind:event ="oninput"/>
        </div>  
    
        <div>
            <div class="small-form-field" >
                <label>Country:</label>
                <input type="text" class="small-input"  @bind="country" @bind:event ="oninput"/>
            </div>
    
            <div class="form-group-field">
                <label>City:</label>
                <input class="long-input" type="text" @bind="city" @bind:event ="oninput"/>
            </div>
        </div>
    
        <div class="small-form-field">
            <label>Street:</label>
            <input type="text" class="small-input" @bind="street" @bind:event ="oninput"/>
        </div>
    
        <div>
            <div class="small-form-field">
                <label>Number:</label>
                <input type="text" class="small-input" @bind="number" @bind:event ="oninput"/>
            </div>
            <div class="small-form-field">
                <label>Postcode:</label>
                <input type="text" class="small-input" @bind="postcode" @bind:event ="oninput"/>
            </div>
    
        </div>
        
        <div class="small-form-field">
            <label>Option:</label>
            <input type="text" class="small-input" @bind="option" @bind:event ="oninput"/>
        </div>
    </div>
    <div class="button-message">
        <button @onclick="@(() => ConfirmInformation())" class="acceptbtn">Confirm My Information</button>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <br/> <label style="color:red">@resultMsg</label>
        }
    </div>

    </div>



<div class="table-div" style="display: @showModalSum">
    <table class="table">
        <thead>
        <th></th>
        <th>Item</th>
        <th>Quantity</th>
        <th></th>
        </thead>
        <tbody>
 
     
        @foreach (var p in productList)
        {
            ProductCard? productCard = cards.FirstOrDefault(productCard => productCard.Id == p.ProductCardId);
            CardItem? cardItem = items.FirstOrDefault(item => item.ProductId == p.Id);

            <tr> <td ><img src="@productCard.Image" style="width: 100px"/></td>
                <td >
                    <p>@productCard.Title</p>
                    <p>@p.Size.ToUpper()</p>
                    <p style="color: @p.Color">@p.Color</p>
                </td>
                <td>
                    <p>@cardItem.Quantity</p>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div class="order-summary-div">
        
        <b>Order Summary</b>
        <p>Subtotal: <label bind="@subtotal">@subtotal</label></p>
        <button @onclick="PlaceOrder" class="myButton" id="checkout-btn">Place Order</button>
        <button @onclick="CancelOrder" class="myButton" id="checkout-btn">Cancel Order</button>
        <p>@resultMsg</p>
        
        <div>
            <p>@OrderDto.CustomerName</p>
            <p>@OrderDto.CustomerEmail</p>
            <p>@OrderDto.CustomerPhoneNumber</p>
            <p>@OrderDto.Shipping.City,@OrderDto.Shipping.Country</p>
            <p>@OrderDto.Shipping.Street,@OrderDto.Shipping.Number</p>
            <p>@OrderDto.Shipping.ExtraInfo</p>
            <p>@OrderDto.Shipping.PostCode</p>
        </div>
    
    </div>
 </div>




   

@code {
   [Parameter]
   public int Id { get; set; }

    private string email = "";
    private string name = "";
    private string phone = "";
    private string country = "";
    private string city = "";
    private string street = "";
    private int number = 0;
    private int postcode = 0;
    private string option = "";
    private int numberOfProducts = 0;
    
    private double subtotal = 0;
    private List<Product> productList = new List<Product>();
    private List<ProductCard?> cards = new List<ProductCard?>();
    private List<CardItem?> items = new List<CardItem?>();
    private global::Shared.Models.ShoppingCart shoppingCart = null;

    
    private CreateOrderDto OrderDto = new CreateOrderDto(2,"ggg","hhh","jjj","jjjj",null,new Adress(1,1,"hhh","jjj",888,"fff",5,"hhhh"));
    

    private string resultMsg = "";
    private string color = "";
    private string showModalInfo = "initial";
    private string showModalSum = "none";

    private async Task ConfirmInformation()
    {
        try
        {
            global::Shared.Models.ShoppingCart cart = await shoppingCartService.getByIdAsync(Id);
            OrderDto = new CreateOrderDto( numberOfProducts,"Processing order", name, email, phone, cart, new Adress(1, 1, country, city, postcode, street, number, option));
         
            LoadOrderSummary();
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }

    }
    protected async Task LoadOrderSummary()
    {
        try
        {
            productList = (List<Product>)OrderDto.ShoppingCart.Products;
            foreach (Product p in productList)
            {
                SocksCard card = await socksCardService.GetById(p.ProductCardId);
                cards.Add(card);
              
                CardItem item = await cardItemService.GetByIdsAsync(p.Id, OrderDto.ShoppingCart.Id);
                
                items.Add(item);
                int itemsCount = item.Quantity;
                numberOfProducts += itemsCount;
                double totalPrice = card.Price * item.Quantity;
                subtotal += totalPrice;

            }

            OrderDto.TotalPrice = subtotal;
            Console.WriteLine(subtotal+"/"+numberOfProducts);
            OrderDto.NumberOfProducts = numberOfProducts;
            showModalInfo = "none";
            showModalSum = "initial";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

    
    protected async Task PlaceOrder()
    {
        try
        {
            
            
            await orderService.CreateAsync(OrderDto);
            shoppingCart = await shoppingCartService.getByIdAsync(Id);
            foreach (var p in shoppingCart.Products)
            {
                await shoppingCartService.RemoveProduct(p, shoppingCart.Id);
            }
           
            navMgr.NavigateTo("/");
    //nav to page that tells you congrats
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }

    }
    
    protected async Task CancelOrder()
    {
        navMgr.NavigateTo($"/ShoppingCart/{OrderDto.ShoppingCart.Id}");
    }





}