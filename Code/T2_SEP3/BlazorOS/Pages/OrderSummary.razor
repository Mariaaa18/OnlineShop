@page "/OrderSummary"
@using global::Shared.Models
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@inject IShoppingCartService shoppingCartService
@inject ISockCardService socksCardService
@inject ICardItemService cardItemService
@inject NavigationManager navMgr
@inject IOrderService orderService

<h3>OrderSummary</h3>

<div class="table-div">
    <table class="table">
        <thead>
        <th></th>
        <th>Item</th>
        <th>Quantity</th>
        <th></th>
        </thead>
        <tbody>
         @foreach (var p in productList)
         {
             p.ToString();
         }
     
        @foreach (var p in productList)
        {
            ProductCard? productCard = cards.FirstOrDefault(productCard => productCard.Id == p.ProductCardId);
            CardItem? cardItem = items.FirstOrDefault(item => item.ProductId == p.Id);
            
            <tr> <td ><img src="@productCard.Image" style="width: 100px"/></td>
                <td >
                    <p>@productCard.Title</p>
                    <p>@p.Size.ToUpper()</p>
                    <p style="color: @p.Color">@p.Color</p>
                </td>
                <td>
                    <p>@cardItem.Quantity</p>
                </td>
             </tr>
        }
        </tbody>
    </table>
    </div>

<div class="order-summary-div">
    
    <b>Order Summary</b>
    <p>Subtotal: <label bind="@subtotal">@subtotal</label></p>
    <button @onclick="PlaceOrder" class="myButton" id="checkout-btn">Place Order</button>
    <button @onclick="CancelOrder" class="myButton" id="checkout-btn">Cancel Order</button>
    <p>@msg</p>
    
    <div>
        <p>@OrderDto.CustomerName</p>
        <p>@OrderDto.CustomerEmail</p>
        <p>@OrderDto.CustomerPhoneNumber</p>
        <p>@OrderDto.Shipping.City,@OrderDto.Shipping.Country</p>
        <p>@OrderDto.Shipping.Street,@OrderDto.Shipping.Number</p>
        <p>@OrderDto.Shipping.ExtraInfo</p>
        <p>@OrderDto.Shipping.PostCode</p>
    </div>

</div>



@code {

    private double subtotal = 0;
    private List<Product> productList = new List<Product>();
    private List<ProductCard?> cards = new List<ProductCard?>();
    private List<CardItem?> items = new List<CardItem?>();

    [CascadingParameter]
    public CreateOrderDto OrderDto { get; set; }

    private string msg = "";
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            productList = (List<Product>)OrderDto.ShoppingCart.Products;
            foreach (Product p in productList)
            {
                SocksCard card = await socksCardService.GetById(p.ProductCardId);
                cards.Add(card);
                CardItem item=await cardItemService.GetByIdsAsync(p.Id, OrderDto.ShoppingCart.Id);
                items.Add(item);
                subtotal = await shoppingCartService.GetTotalPrice(OrderDto.ShoppingCart.Id);
                OrderDto.TotalPrice = subtotal;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    protected async Task PlaceOrder()
    {
        try
        {
            await orderService.CreateAsync(OrderDto);
            navMgr.NavigateTo("/");
            //nav to page that tells you congrats
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

    }
    
    protected async Task CancelOrder()
    {
      navMgr.NavigateTo($"/ShoppingCart/{OrderDto.ShoppingCart.Id}");
    }
    
    
    
    
}